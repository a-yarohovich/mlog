package mlog

import (
	"fmt"
	"io"
	"os"
	"runtime"
	"sync"
	"time"
)

// Level ...
type Level int

// Flags how describe logging level
const (
	LevelDebug Level = iota
	LevelInfo
	LevelWarnig
	LevelError
	LevelFatal
)

// FormatFlags ...
type FormatFlags int

// These flags define which text to prefix to each log entry generated by the Logger.
const (
	Ldate         FormatFlags     = 1 << iota // the date in the local time zone: 2009/01/23
	Ltime                                     // the time in the local time zone: 01:23:23
	Lmicroseconds                             // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                                 // full file name and line number: /a/b/c/d.go:23
	Lshortfile                                // final file name element and line number: d.go:23. overrides Llongfile
	LUTC                                      // if Ldate or Ltime is set, use UTC rather than the local time zone
	Lcolor                                    // Colorized output
	LstdFlags     = Ldate | Ltime             // initial values for the standard logger
)

// A Logger represents an active logging object
type Logger struct {
	mu     sync.Mutex  // ensures atomic writes; protects the following fields
	prefix string      // prefix to write at beginning of each line
	flag   FormatFlags // properties
	out    io.Writer   // destination for output
	buf    []byte      // for accumulating text to write
}

// New creates a new Logger.
func New(out io.Writer, prefix string, flag FormatFlags) *Logger {
	return &Logger{out: out, prefix: prefix, flag: flag}
}

// SetOutput sets the output destination for the logger.
func (l *Logger) SetOutput(w io.Writer) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.out = w
}

var std = New(os.Stderr, "", LstdFlags)

// Cheap integer to fixed-width decimal ASCII. Give a negative width to avoid zero-padding.
func itoa(buf *[]byte, i int, wid int) {
	// Assemble decimal in reverse order.
	var b [20]byte
	bp := len(b) - 1
	for i >= 10 || wid > 1 {
		wid--
		q := i / 10
		b[bp] = byte('0' + i - q*10)
		bp--
		i = q
	}
	// i < 10
	b[bp] = byte('0' + i)
	*buf = append(*buf, b[bp:]...)
}

// formatHeader writes log header to buf in following order:
//   * l.prefix (if it's not blank),
//   * date and/or time (if corresponding flags are provided),
//   * file and line number (if corresponding flags are provided).
func (l *Logger) formatHeader(buf *[]byte, t time.Time, file string, line int) {
	*buf = append(*buf, l.prefix...)
	if l.flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if l.flag&LUTC != 0 {
			t = t.UTC()
		}
		if l.flag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(buf, year, 4)
			*buf = append(*buf, '/')
			itoa(buf, int(month), 2)
			*buf = append(*buf, '/')
			itoa(buf, day, 2)
			*buf = append(*buf, ' ')
		}
		if l.flag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			*buf = append(*buf, ':')
			itoa(buf, min, 2)
			*buf = append(*buf, ':')
			itoa(buf, sec, 2)
			if l.flag&Lmicroseconds != 0 {
				*buf = append(*buf, '.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			*buf = append(*buf, ' ')
		}
	}
	if l.flag&(Lshortfile|Llongfile) != 0 {
		if l.flag&Lshortfile != 0 {
			short := file
			for i := len(file) - 1; i > 0; i-- {
				if file[i] == '/' {
					short = file[i+1:]
					break
				}
			}
			file = short
		}
		*buf = append(*buf, file...)
		*buf = append(*buf, ':')
		itoa(buf, line, -1)
		*buf = append(*buf, ": "...)
	}
}

// Output writes the output for a logging event. The string s contains
// the text to print after the prefix specified by the flags of the
// Logger. A newline is appended if the last character of s is not
// already a newline. Calldepth is used to recover the PC and is
// provided for generality, although at the moment on all pre-defined
// paths it will be 2.
func (l *Logger) Output(calldepth int, s string, level Level) error {
	now := time.Now() // get this early.
	var file string
	var line int
	l.mu.Lock()
	defer l.mu.Unlock()
	if l.flag&(Lshortfile|Llongfile) != 0 {
		// Release lock while getting caller info - it's expensive.
		l.mu.Unlock()
		var ok bool
		_, file, line, ok = runtime.Caller(calldepth)
		if !ok {
			file = "???"
			line = 0
		}
		l.mu.Lock()
	}
	l.buf = l.buf[:0]
	switch level {
	case LevelDebug:
		// White
		l.buf = append(l.buf, "[DBG] "...)
	case LevelInfo:
		// Green
		l.buf = append(l.buf, "[INF] "...)
	case LevelWarnig:
		// Yellow
		l.buf = append(l.buf, "[WRN] "...)
	case LevelError:
		// Red
		l.buf = append(l.buf, "[ERR] "...)
	case LevelFatal:
		// Red
		l.buf = append(l.buf, "[FTL] "...)
	}
	l.formatHeader(&l.buf, now, file, line)
	l.buf = append(l.buf, s...)
	if l.flag&Lcolor != 0 {
		switch level {
		case LevelDebug:
			// White
			l.buf = append([]byte("\033[37m"), l.buf...)
		case LevelInfo:
			// Green
			l.buf = append([]byte("\033[32m"), l.buf...)
		case LevelWarnig:
			// Yellow
			l.buf = append([]byte("\033[1;33m"), l.buf...)
		case LevelError:
			// Red
			l.buf = append([]byte("\033[1;31m"), l.buf...)
		case LevelFatal:
			// Red
			l.buf = append([]byte("\033[1;31m"), l.buf...)
		}
		l.buf = append(l.buf, "\033[0m"...)
	}
	if len(s) == 0 || s[len(s)-1] != '\n' {
		l.buf = append(l.buf, '\n')
	}
	_, err := l.out.Write(l.buf)
	return err
}

// Flags returns the output flags for the logger.
func (l *Logger) Flags() FormatFlags {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.flag
}

// SetFlags sets the output flags for the logger.
func (l *Logger) SetFlags(flag FormatFlags) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.flag = flag
}

// Writer returns the output destination for the logger.
func (l *Logger) Writer() io.Writer {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.out
}

// SetOutput sets the output destination for the standard logger.
func SetOutput(w io.Writer) {
	std.mu.Lock()
	defer std.mu.Unlock()
	std.out = w
}

// Flags returns the output flags for the standard logger.
func Flags() FormatFlags {
	return std.Flags()
}

// SetFlags sets the output flags for the standard logger.
func SetFlags(flag FormatFlags) {
	std.SetFlags(flag)
}

// Writer returns the output destination for the standard logger.
func Writer() io.Writer {
	return std.Writer()
}

// Debug ...
func Debug(format string, v ...interface{}) {
	std.Output(2, fmt.Sprintf(format, v...), LevelDebug)
}

// Info ...
func Info(format string, v ...interface{}) {
	std.Output(2, fmt.Sprintf(format, v...), LevelInfo)
}

// Warning ...
func Warning(format string, v ...interface{}) {
	std.Output(2, fmt.Sprintf(format, v...), LevelWarnig)
}

// Error ...
func Error(format string, v ...interface{}) {
	std.Output(2, fmt.Sprintf(format, v...), LevelError)
}

// Fatal call to panic(msg)
func Fatal(format string, v ...interface{}) {
	std.Output(2, fmt.Sprintf(format, v...), LevelFatal)
	panic(fmt.Sprintf(format, v...))
}

// Output writes the output for a logging event. The string s contains
func Output(calldepth int, s string, level Level) error {
	return std.Output(calldepth+1, s, level) // +1 for this frame.
}
